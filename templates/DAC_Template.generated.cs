/* This file is autogenerated from table {Table_Name}. Any modification will 
 * be lost once it is regenerated.
 *
 * Template         : DataAccess.cst
 * Generator        : {generator} 
 * Date             : {datetime}
 */

using System;
using System.Collections;
using System.Data;
using System.Data.SqlClient;

namespace XHS.DataAccess
{
	/// <summary>
	/// XHS {Table_Name} data access class.
	/// </summary>

	public partial class DAC_{Table_Name} : DataAccessBase
	{
		#region {Table_Name}Column Enum
			
		/// <summary>
		/// Enumerate the {Table_Name} columns.
		/// </summary>
		public enum {Table_Name}Column : int
		{
			{table_column_enum}
		}

		#endregion
        
		public DAC_{Table_Name}(SqlConnection dbConnection): base(dbConnection)
		{

		}
 
		public int Insert({Table_Name}s obj{Table_Name}s)
		{
			int intRowsAffected = 0;

			if (obj{Table_Name}s.Collection.Length == 0)
				return 0;

			SqlTransaction dbTransaction = objDBConnection.BeginTransaction();

			try
			{
				SqlCommand dbCommand = new SqlCommand();

				dbCommand.Connection = objDBConnection;
				dbCommand.CommandTimeout = 30;
				dbCommand.CommandType = CommandType.StoredProcedure;
				dbCommand.CommandText = "xhs_sp_ins_{table_name_lower}";
				dbCommand.Transaction = dbTransaction;

				for (int i = 0; i < obj{Table_Name}s.Collection.Length; i++)
				{
					dbCommand.Parameters.Clear();

					{insert_params}
			
					SqlParameter dpIdentity = CreateParameter(dbCommand, "@Identity", SqlDbType.Int, null, ParameterDirection.Output);

					intRowsAffected += dbCommand.ExecuteNonQuery();

					obj{Table_Name}s.Collection[i].ID = Convert.ToInt32(dpIdentity.Value.ToString());
				}

				dbTransaction.Commit();
				dbCommand.Dispose();
				return intRowsAffected;
			}
			catch (Exception e)
			{
				dbTransaction.Rollback();
				throw new ApplicationException("Error occurred during attempt to insert record into XHS {Table_Name} table and has been rolled-back.", e);
			}
		}
        
	  public int Update({Table_Name}s obj{Table_Name}s)
		{
			int intRowsAffected = 0;

			if (obj{Table_Name}s.Collection.Length == 0)
				return 0;

			SqlTransaction dbTransaction = objDBConnection.BeginTransaction();

			try
			{
				SqlCommand dbCommand = new SqlCommand();

				dbCommand.Connection = objDBConnection;
				dbCommand.CommandTimeout = 30;
				dbCommand.CommandType = CommandType.StoredProcedure;
				dbCommand.CommandText = "xhs_sp_upd_{table_name_lower}";
				dbCommand.Transaction = dbTransaction;

				for (int i = 0; i < obj{Table_Name}s.Collection.Length; i++)
				{
          dbCommand.Parameters.Clear();
                    
					{update_params}

          intRowsAffected += dbCommand.ExecuteNonQuery();
				}

				dbTransaction.Commit();
				dbCommand.Dispose();
				return intRowsAffected;
			}

			catch (Exception e)
			{
				dbTransaction.Rollback();
        throw new ApplicationException("Error occurred during attempt to update record in XHS {Table_Name} table and has been rolled-back.", e);
			}

		}
        
		public int Delete({Table_Name}s obj{Table_Name}s)
		{
			int intRowsAffected = 0;

			if (obj{Table_Name}s.Collection.Length == 0)
				return 0;

			SqlTransaction dbTransaction = objDBConnection.BeginTransaction();

			try
			{
				SqlCommand dbCommand = new SqlCommand();

				dbCommand.Connection = objDBConnection;
				dbCommand.CommandTimeout = 30;
				dbCommand.CommandType = CommandType.StoredProcedure;
				dbCommand.CommandText = "xhs_sp_del_{table_name_lower}";
				dbCommand.Transaction = dbTransaction;

				for (int i = 0; i < obj{Table_Name}s.Collection.Length; i++)
				{
					dbCommand.Parameters.Clear();
					
					CreateParameter(dbCommand, "@ID", SqlDbType.Int, obj{Table_Name}s.Collection[i].ID);

					intRowsAffected += dbCommand.ExecuteNonQuery();
				}

				dbTransaction.Commit();
				dbCommand.Dispose();
				return intRowsAffected;
			}

			catch (Exception e)
			{
				dbTransaction.Rollback();
				throw new ApplicationException("Error occurred during attempt to delete record into XHS {Table_Name} table and has been rolled-back.", e);
			}
		}
			
		protected void Fill(SqlDataReader objDataReader, ref {Table_Name} obj{Table_Name})
		{
{fill}
					
			{createField}

			{updateField}
		}

		public int FindByID(ref {Table_Name} obj{Table_Name}, int intID)
		{
			int intRowsReturned = 0;

			try
			{
				SqlCommand dbCommand = new SqlCommand();

				dbCommand.Connection = objDBConnection;
				dbCommand.CommandTimeout = 30;
				dbCommand.CommandType = CommandType.StoredProcedure;
				dbCommand.CommandText = "xhs_sp_get_{table_name_lower}_by_id";

				CreateParameter(dbCommand, "@ID", SqlDbType.Int, intID);

				objDataReader = dbCommand.ExecuteReader();

				if (!objDataReader.HasRows)
				{
					objDataReader.Close();
					return 0;
				}

				while (objDataReader.Read())
				{
					Fill(objDataReader, ref obj{Table_Name});
			
					intRowsReturned++;
				}

				objDataReader.Close();

				return intRowsReturned;
			}
			catch (Exception e)
			{
				if (objDataReader != null && !objDataReader.IsClosed)
				{
					objDataReader.Close();
				}
				throw new ApplicationException("Error occurred during attempt to read record from XHS {Table_Name} table.", e);
			}
		}
			
		public int FindAll(ref {Table_Name}s obj{Table_Name}s)
		{
			int intRowsReturned = 0;

			try
			{
				SqlCommand dbCommand = new SqlCommand();

				dbCommand.Connection = objDBConnection;
				dbCommand.CommandTimeout = 30;
				dbCommand.CommandType = CommandType.StoredProcedure;
				dbCommand.CommandText = "xhs_sp_get_{table_name_lower}_all";

				objDataReader = dbCommand.ExecuteReader();

				if (!objDataReader.HasRows)
				{
					obj{Table_Name}s.Collection = new {Table_Name}[0];
					objDataReader.Close();
					return 0;
				}
                
				ArrayList al{Table_Name} = new ArrayList();

				while (objDataReader.Read())
				{
					{Table_Name} obj{Table_Name} = new {Table_Name}();
					
					Fill(objDataReader, ref obj{Table_Name});
			
					al{Table_Name}.Add(obj{Table_Name});
					
					intRowsReturned++;
				}

				objDataReader.Close();
                
        obj{Table_Name}s.Collection = new {Table_Name}[al{Table_Name}.Count];

				for (int i = 0; i < al{Table_Name}.Count; i++)
					obj{Table_Name}s.Collection[i] = ({Table_Name})al{Table_Name}[i];

				return intRowsReturned;
			}

			catch (Exception e)
			{
				if (objDataReader != null && !objDataReader.IsClosed)
				{
					objDataReader.Close();
				}
				throw new ApplicationException("Error occurred during attempt to read record from XHS {Table_Name} table.", e);
			}

		} 
  }
}
